<?xml version="1.0" encoding="utf-8"?>
<!--
     Copyright (C) 2023-2024 DroidX-UI
     SPDX-License-Identifier: Apache-2.0
-->
<resources>

    <!-- The list of components which should be automatically disabled for a specific device.
         Note: this MUST not be used to randomly disable components, ask for approval first! -->
    <string-array name="config_deviceDisabledComponents" translatable="false">
    </string-array>

    <!-- The list of components which should be automatically disabled for all devices. -->
    <string-array name="config_globallyDisabledComponents" translatable="false">
    </string-array>

    <!-- The list of components which should be forced to be enabled. -->
    <string-array name="config_forceEnabledComponents" translatable="false">
    </string-array>

    <!-- Define device configs on boot -->
    <string-array name="global_device_configs_override" translatable="false">
    </string-array>
    
    <string-array name="device_configs_override" translatable="false">
    </string-array>
    
    <!-- The list of package IDs that are allowed to use aux cameras.
         NOTE: If this list is empty then all apps will be able to use aux cameras. -->
    <string-array name="config_cameraAuxPackageAllowList" translatable="false" />

    <!-- The list of package IDs that are not allowed to use aux cameras. -->
    <string-array name="config_cameraAuxPackageExcludeList" translatable="false" />

    <!-- The list of package IDs that are allowed to skip camera high frame rate checks. -->
    <string-array name="config_cameraHFRPrivAppList" translatable="false" />

    <!-- Paths to the libraries that contain device specific key handlers -->
    <string-array name="config_deviceKeyHandlerLibs" translatable="false">
    </string-array>

    <!-- Names of the key handler classes -->
    <string-array name="config_deviceKeyHandlerClasses" translatable="false">
    </string-array>

    <!-- Is the battery LED intrusive? Used to decide if there should be a disable option -->
    <bool name="config_intrusiveBatteryLed">@bool/config_intrusiveNotificationLed</bool>

    <!-- Whether to use Richtap vibration -->
    <bool name="config_usesRichtapVibration">false</bool>

    <!-- Whether to cleanup fingerprints upon connection to the daemon and when user switches -->
    <bool name="config_cleanupUnusedFingerprints">true</bool>

    <!-- Whether to cancel fingerprint operation if not idle -->
    <bool name="config_fpCancelIfNotIdle">false</bool>

    <!-- Whether charging control should be enabled by default -->
    <bool name="config_chargingControlEnabled">false</bool>
    <!-- Default charging control mode.
         This integer should be set to:
         1 - auto - Use the alarm to calculate the time range when to activate charging control
         2 - custom - Use time range when the device is usually charging for hours
         3 - limit - Just limit charging -->
    <integer name="config_defaultChargingControlMode">1</integer>
    <!-- Default time when charging control is activated.
         Represented as seconds from midnight (e.g. 79200 == 10pm). -->
    <integer name="config_defaultChargingControlStartTime">79200</integer>
    <!-- Default time when battery will be fully charged.
         Represented as seconds from midnight (e.g. 21600 == 6am). -->
    <integer name="config_defaultChargingControlTargetTime">21600</integer>
    <!-- Default charging limit. -->
    <integer name="config_defaultChargingControlLimit">80</integer>
    <!-- Considering the fact that the system might have an incorrect estimation of the time to
         full. Set a time margin to make the device fully charged before the target time arrives.
         The unit is minutes and the default value is 30 minutes. If you find that it is not enough
         to make the device to be fully charged at the target time, increase the value
    -->
    <integer name="config_chargingControlTimeMargin">30</integer>
    <!-- For a device that cannot bypass battery when charging stops (that is, the battery current
         is 0mA when charging stops), the battery will gradually discharge. So we need to make it
         recharge when the battery level is lower than a threshold. Set this so that the device
         will be charged between (limit - val) and limit. -->
    <integer name="config_chargingControlBatteryRechargeMargin">10</integer>

</resources>
